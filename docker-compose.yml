services:
  postgres:
    image: postgres:15-alpine
    container_name: orders-postgres
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app
      POSTGRES_DB: orders
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d orders || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 10
    ports:
      - "5433:5432"
    restart: unless-stopped
    

  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    container_name: orders-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.6.1
    container_name: orders-kafka
    depends_on:
      zookeeper:
        condition: service_started
    ports:
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:9094
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    restart: unless-stopped

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: orders-kafka-ui
    depends_on:
      kafka:
        condition: service_started
      zookeeper:
        condition: service_started
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    ports:
      - "8090:8080"
    restart: unless-stopped


  migrate:
    image: kukymbr/goose-docker:3.24.2
    container_name: orders-migrate
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - GOOSE_DRIVER=postgres
      - GOOSE_DBSTRING=postgres://app:app@postgres:5432/orders?sslmode=disable
      - GOOSE_VERBOSE=true
      - GOOSE_DIR=/migrations
      - GOOSE_COMMAND=up
    volumes:
      - ./migrations:/migrations:ro
    restart: "no"

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: orders-app
    depends_on:
      postgres:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
      kafka:
        condition: service_started
      jaeger:
        condition: service_started
    env_file:
      - ./.env.compose
    ports:
      - "8081:8081"
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: orders-prometheus
    command: ["--config.file=/etc/prometheus/prometheus.yml"]
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    depends_on:
      - app
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: orders-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    restart: unless-stopped

  jaeger:
    image: jaegertracing/all-in-one:1.58
    container_name: orders-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true      # включает OTLP (4317/4318)
    ports:
      - "16686:16686"    # UI
      - "4318:4318"      # OTLP/HTTP endpoint
    restart: unless-stopped

volumes:
  pgdata:
