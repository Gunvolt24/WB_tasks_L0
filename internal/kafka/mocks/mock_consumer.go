// Code generated by MockGen. DO NOT EDIT.
// Source: consumer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	kafka "github.com/segmentio/kafka-go"
)

// Mockreader is a mock of reader interface.
type Mockreader struct {
	ctrl     *gomock.Controller
	recorder *MockreaderMockRecorder
}

// MockreaderMockRecorder is the mock recorder for Mockreader.
type MockreaderMockRecorder struct {
	mock *Mockreader
}

// NewMockreader creates a new mock instance.
func NewMockreader(ctrl *gomock.Controller) *Mockreader {
	mock := &Mockreader{ctrl: ctrl}
	mock.recorder = &MockreaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockreader) EXPECT() *MockreaderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *Mockreader) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockreaderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*Mockreader)(nil).Close))
}

// CommitMessages mocks base method.
func (m *Mockreader) CommitMessages(ctx context.Context, msgs ...kafka.Message) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range msgs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CommitMessages", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitMessages indicates an expected call of CommitMessages.
func (mr *MockreaderMockRecorder) CommitMessages(ctx interface{}, msgs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, msgs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitMessages", reflect.TypeOf((*Mockreader)(nil).CommitMessages), varargs...)
}

// Config mocks base method.
func (m *Mockreader) Config() kafka.ReaderConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(kafka.ReaderConfig)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockreaderMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*Mockreader)(nil).Config))
}

// FetchMessage mocks base method.
func (m *Mockreader) FetchMessage(ctx context.Context) (kafka.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchMessage", ctx)
	ret0, _ := ret[0].(kafka.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchMessage indicates an expected call of FetchMessage.
func (mr *MockreaderMockRecorder) FetchMessage(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchMessage", reflect.TypeOf((*Mockreader)(nil).FetchMessage), ctx)
}

// MockmessageSaver is a mock of messageSaver interface.
type MockmessageSaver struct {
	ctrl     *gomock.Controller
	recorder *MockmessageSaverMockRecorder
}

// MockmessageSaverMockRecorder is the mock recorder for MockmessageSaver.
type MockmessageSaverMockRecorder struct {
	mock *MockmessageSaver
}

// NewMockmessageSaver creates a new mock instance.
func NewMockmessageSaver(ctrl *gomock.Controller) *MockmessageSaver {
	mock := &MockmessageSaver{ctrl: ctrl}
	mock.recorder = &MockmessageSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmessageSaver) EXPECT() *MockmessageSaverMockRecorder {
	return m.recorder
}

// SaveFromMessage mocks base method.
func (m *MockmessageSaver) SaveFromMessage(ctx context.Context, raw []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFromMessage", ctx, raw)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFromMessage indicates an expected call of SaveFromMessage.
func (mr *MockmessageSaverMockRecorder) SaveFromMessage(ctx, raw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFromMessage", reflect.TypeOf((*MockmessageSaver)(nil).SaveFromMessage), ctx, raw)
}
