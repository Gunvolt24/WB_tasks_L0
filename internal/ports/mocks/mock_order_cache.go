// Code generated by MockGen. DO NOT EDIT.
// Source: ../order_cache.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Gunvolt24/wb_l0/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockOrderCache is a mock of OrderCache interface.
type MockOrderCache struct {
	ctrl     *gomock.Controller
	recorder *MockOrderCacheMockRecorder
}

// MockOrderCacheMockRecorder is the mock recorder for MockOrderCache.
type MockOrderCacheMockRecorder struct {
	mock *MockOrderCache
}

// NewMockOrderCache creates a new mock instance.
func NewMockOrderCache(ctrl *gomock.Controller) *MockOrderCache {
	mock := &MockOrderCache{ctrl: ctrl}
	mock.recorder = &MockOrderCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderCache) EXPECT() *MockOrderCacheMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockOrderCache) Get(ctx context.Context, orderUID string) (*domain.Order, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, orderUID)
	ret0, _ := ret[0].(*domain.Order)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockOrderCacheMockRecorder) Get(ctx, orderUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOrderCache)(nil).Get), ctx, orderUID)
}

// Set mocks base method.
func (m *MockOrderCache) Set(ctx context.Context, order *domain.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockOrderCacheMockRecorder) Set(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockOrderCache)(nil).Set), ctx, order)
}

// WarmUp mocks base method.
func (m *MockOrderCache) WarmUp(ctx context.Context, orders []*domain.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WarmUp", ctx, orders)
	ret0, _ := ret[0].(error)
	return ret0
}

// WarmUp indicates an expected call of WarmUp.
func (mr *MockOrderCacheMockRecorder) WarmUp(ctx, orders interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WarmUp", reflect.TypeOf((*MockOrderCache)(nil).WarmUp), ctx, orders)
}
