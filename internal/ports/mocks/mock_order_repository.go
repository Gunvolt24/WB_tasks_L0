// Code generated by MockGen. DO NOT EDIT.
// Source: ../order_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Gunvolt24/wb_l0/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockOrderRepository is a mock of OrderRepository interface.
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository.
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance.
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// GetByUID mocks base method.
func (m *MockOrderRepository) GetByUID(ctx context.Context, orderUID string) (*domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUID", ctx, orderUID)
	ret0, _ := ret[0].(*domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUID indicates an expected call of GetByUID.
func (mr *MockOrderRepositoryMockRecorder) GetByUID(ctx, orderUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUID", reflect.TypeOf((*MockOrderRepository)(nil).GetByUID), ctx, orderUID)
}

// LastN mocks base method.
func (m *MockOrderRepository) LastN(ctx context.Context, n int) ([]*domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastN", ctx, n)
	ret0, _ := ret[0].([]*domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastN indicates an expected call of LastN.
func (mr *MockOrderRepositoryMockRecorder) LastN(ctx, n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastN", reflect.TypeOf((*MockOrderRepository)(nil).LastN), ctx, n)
}

// ListByCustomer mocks base method.
func (m *MockOrderRepository) ListByCustomer(ctx context.Context, customerID string, limit, offset int) ([]*domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByCustomer", ctx, customerID, limit, offset)
	ret0, _ := ret[0].([]*domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByCustomer indicates an expected call of ListByCustomer.
func (mr *MockOrderRepositoryMockRecorder) ListByCustomer(ctx, customerID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByCustomer", reflect.TypeOf((*MockOrderRepository)(nil).ListByCustomer), ctx, customerID, limit, offset)
}

// Save mocks base method.
func (m *MockOrderRepository) Save(ctx context.Context, order *domain.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockOrderRepositoryMockRecorder) Save(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockOrderRepository)(nil).Save), ctx, order)
}
